!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.8	//
BLACK_FOREGROUND	ui.c	/^#define BLACK_FOREGROUND /;"	d	file:
BLUE_FOREGROUND	ui.c	/^#define BLUE_FOREGROUND /;"	d	file:
BOLD	ui.c	/^#define BOLD /;"	d	file:
BOTH_BAR_COLOR	ui.c	/^int BOTH_BAR_COLOR[] = {RED_FOREGROUND, BOLD};$/;"	v
BOTTOM_BAR_COLOR	ui.c	/^int BOTTOM_BAR_COLOR[] = {BLUE_FOREGROUND, BOLD};$/;"	v
BRIDGE_NUMBER	token.h	/^#define BRIDGE_NUMBER(/;"	d
BROADCAST	token.h	/^#define BROADCAST(/;"	d
CAPTURE_LENGTH	iftop.c	/^#define CAPTURE_LENGTH /;"	d	file:
CASERET	dlcommon.c	/^#define		CASERET(/;"	d	file:
COLOR_PAIR_BOTH	ui.c	/^#define COLOR_PAIR_BOTH /;"	d	file:
COLOR_PAIR_RECV	ui.c	/^#define COLOR_PAIR_RECV /;"	d	file:
COLOR_PAIR_SENT	ui.c	/^#define COLOR_PAIR_SENT /;"	d	file:
CONFIG_TYPE_BOOL	cfgfile.c	/^#define CONFIG_TYPE_BOOL /;"	d	file:
CONFIG_TYPE_INT	cfgfile.c	/^#define CONFIG_TYPE_INT /;"	d	file:
CONFIG_TYPE_STRING	cfgfile.c	/^#define CONFIG_TYPE_STRING /;"	d	file:
CUM_LABEL_COLOR	ui.c	/^int CUM_LABEL_COLOR[] = {YELLOW_FOREGROUND, NONBOLD};$/;"	v
CUM_TRANSFER_COLUMN_COLOR	ui.c	/^int CUM_TRANSFER_COLUMN_COLOR[] = {YELLOW_FOREGROUND, BOLD};$/;"	v
CYAN_FOREGROUND	ui.c	/^#define CYAN_FOREGROUND /;"	d	file:
DIRECTION	token.h	/^#define DIRECTION(/;"	d
DLCOMMON_H	dlcommon.h	/^#define DLCOMMON_H$/;"	d
DL_UL_INDICATOR_COLOR	ui.c	/^int DL_UL_INDICATOR_COLOR[] = {BLUE_FOREGROUND, BOLD};$/;"	v
DUMP_RESOLUTION	iftop.h	/^#define DUMP_RESOLUTION /;"	d
ETHERTYPE_8021Q	ethertype.h	/^#define    ETHERTYPE_8021Q /;"	d
ETHERTYPE_AARP	ethertype.h	/^#define ETHERTYPE_AARP /;"	d
ETHERTYPE_ARP	ether.h	/^#define    ETHERTYPE_ARP /;"	d
ETHERTYPE_ARP	ethertype.h	/^#define ETHERTYPE_ARP	/;"	d
ETHERTYPE_ATALK	ethertype.h	/^#define ETHERTYPE_ATALK /;"	d
ETHERTYPE_CISCO_CDP	llc.h	/^#define    ETHERTYPE_CISCO_CDP /;"	d
ETHERTYPE_DECDNS	ethertype.h	/^#define    ETHERTYPE_DECDNS /;"	d
ETHERTYPE_DECDTS	ethertype.h	/^#define    ETHERTYPE_DECDTS /;"	d
ETHERTYPE_DN	ethertype.h	/^#define    ETHERTYPE_DN /;"	d
ETHERTYPE_IP	ether.h	/^#define    ETHERTYPE_IP /;"	d
ETHERTYPE_IP	ethertype.h	/^#define	ETHERTYPE_IP	/;"	d
ETHERTYPE_IPV6	ethertype.h	/^#define ETHERTYPE_IPV6 /;"	d
ETHERTYPE_IPX	ethertype.h	/^#define ETHERTYPE_IPX /;"	d
ETHERTYPE_LANBRIDGE	ethertype.h	/^#define    ETHERTYPE_LANBRIDGE /;"	d
ETHERTYPE_LAT	ethertype.h	/^#define    ETHERTYPE_LAT /;"	d
ETHERTYPE_LOOPBACK	ethertype.h	/^#define    ETHERTYPE_LOOPBACK /;"	d
ETHERTYPE_MOPDL	ethertype.h	/^#define    ETHERTYPE_MOPDL /;"	d
ETHERTYPE_MOPRC	ethertype.h	/^#define    ETHERTYPE_MOPRC /;"	d
ETHERTYPE_MPLS	ethertype.h	/^#define    ETHERTYPE_MPLS /;"	d
ETHERTYPE_MPLS_MULTI	ethertype.h	/^#define    ETHERTYPE_MPLS_MULTI /;"	d
ETHERTYPE_NS	ethertype.h	/^#define ETHERTYPE_NS /;"	d
ETHERTYPE_PPP	ethertype.h	/^#define    ETHERTYPE_PPP /;"	d
ETHERTYPE_PPPOED	ethertype.h	/^#define ETHERTYPE_PPPOED /;"	d
ETHERTYPE_PPPOES	ethertype.h	/^#define ETHERTYPE_PPPOES /;"	d
ETHERTYPE_PUP	ether.h	/^#define    ETHERTYPE_PUP /;"	d
ETHERTYPE_PUP	ethertype.h	/^#define	ETHERTYPE_PUP	/;"	d
ETHERTYPE_REVARP	ether.h	/^#define    ETHERTYPE_REVARP /;"	d
ETHERTYPE_REVARP	ethertype.h	/^#define ETHERTYPE_REVARP	/;"	d
ETHERTYPE_SCA	ethertype.h	/^#define ETHERTYPE_SCA /;"	d
ETHERTYPE_SPRITE	ethertype.h	/^#define    ETHERTYPE_SPRITE /;"	d
ETHERTYPE_TRAIL	ethertype.h	/^#define ETHERTYPE_TRAIL /;"	d
ETHERTYPE_VEXP	ethertype.h	/^#define    ETHERTYPE_VEXP /;"	d
ETHERTYPE_VPROD	ethertype.h	/^#define    ETHERTYPE_VPROD /;"	d
ETHER_ADDR_LEN	ether.h	/^#define    ETHER_ADDR_LEN /;"	d
EXTRACT_16BITS	extract.h	/^#define EXTRACT_16BITS(/;"	d
EXTRACT_24BITS	extract.h	/^#define EXTRACT_24BITS(/;"	d
EXTRACT_32BITS	extract.h	/^#define EXTRACT_32BITS(/;"	d
EXTRACT_LE_16BITS	extract.h	/^#define EXTRACT_LE_16BITS(/;"	d
EXTRACT_LE_32BITS	extract.h	/^#define EXTRACT_LE_32BITS(/;"	d
EXTRACT_LE_8BITS	extract.h	/^#define EXTRACT_LE_8BITS(/;"	d
FOURTY_SECOND_TRANSFER_COLUMN_COLOR	ui.c	/^int FOURTY_SECOND_TRANSFER_COLUMN_COLOR[] = {BLUE_FOREGROUND, BOLD};$/;"	v
FRAME_TYPE	token.h	/^#define FRAME_TYPE(/;"	d
GREEN_FOREGROUND	ui.c	/^#define GREEN_FOREGROUND /;"	d	file:
HASH_STATUS_KEY_NOT_FOUND	hash.h	/^    HASH_STATUS_KEY_NOT_FOUND$/;"	e	enum:__anon7
HASH_STATUS_MEM_EXHAUSTED	hash.h	/^    HASH_STATUS_MEM_EXHAUSTED,$/;"	e	enum:__anon7
HASH_STATUS_OK	hash.h	/^    HASH_STATUS_OK,$/;"	e	enum:__anon7
HAVE_C99_INTS	config.h	/^#define HAVE_C99_INTS /;"	d
HAVE_INET_ATON	config.h	/^#define HAVE_INET_ATON /;"	d
HAVE_INET_PTON	config.h	/^#define HAVE_INET_PTON /;"	d
HAVE_INTTYPES_H	config.h	/^#define HAVE_INTTYPES_H /;"	d
HAVE_LIBPCAP	config.h	/^#define HAVE_LIBPCAP /;"	d
HAVE_MEMORY_H	config.h	/^#define HAVE_MEMORY_H /;"	d
HAVE_PCAP_H	config.h	/^#define HAVE_PCAP_H /;"	d
HAVE_REGCOMP	config.h	/^#define HAVE_REGCOMP /;"	d
HAVE_SELECT	config.h	/^#define HAVE_SELECT /;"	d
HAVE_STDINT_H	config.h	/^#define HAVE_STDINT_H /;"	d
HAVE_STDLIB_H	config.h	/^#define HAVE_STDLIB_H /;"	d
HAVE_STRDUP	config.h	/^#define HAVE_STRDUP /;"	d
HAVE_STRERROR	config.h	/^#define HAVE_STRERROR /;"	d
HAVE_STRINGS_H	config.h	/^#define HAVE_STRINGS_H /;"	d
HAVE_STRING_H	config.h	/^#define HAVE_STRING_H /;"	d
HAVE_STRSPN	config.h	/^#define HAVE_STRSPN /;"	d
HAVE_SYS_IOCTL_H	config.h	/^#define HAVE_SYS_IOCTL_H /;"	d
HAVE_SYS_SOCKIO_H	config.h	/^#define HAVE_SYS_SOCKIO_H /;"	d
HAVE_SYS_STAT_H	config.h	/^#define HAVE_SYS_STAT_H /;"	d
HAVE_SYS_TIME_H	config.h	/^#define HAVE_SYS_TIME_H /;"	d
HAVE_SYS_TYPES_H	config.h	/^#define HAVE_SYS_TYPES_H /;"	d
HAVE_UNISTD_H	config.h	/^#define HAVE_UNISTD_H /;"	d
HELP_MESSAGE	ui.c	/^#define HELP_MESSAGE /;"	d	file:
HELP_MSG_SIZE	ui.c	/^#define HELP_MSG_SIZE /;"	d	file:
HELP_TIME	ui.c	/^#define HELP_TIME /;"	d	file:
HISTORY_DIVISIONS	ui.c	/^#define HISTORY_DIVISIONS /;"	d	file:
HISTORY_LENGTH	iftop.h	/^#define HISTORY_LENGTH /;"	d
HOST1_COLOR	ui.c	/^int HOST1_COLOR[] = {CYAN_FOREGROUND, BOLD};$/;"	v
HOST2_COLOR	ui.c	/^int HOST2_COLOR[] = {MAGENTA_FOREGROUND, BOLD};$/;"	v
HOSTNAME_LENGTH	ui.c	/^#define HOSTNAME_LENGTH /;"	d	file:
IFTOP_VERSION	config.h	/^#define IFTOP_VERSION /;"	d
IPDEFTTL	ip.h	/^#define    IPDEFTTL /;"	d
IPFRAGTTL	ip.h	/^#define    IPFRAGTTL /;"	d
IPOPT_CLASS	ip.h	/^#define    IPOPT_CLASS(/;"	d
IPOPT_CONTROL	ip.h	/^#define    IPOPT_CONTROL /;"	d
IPOPT_COPIED	ip.h	/^#define    IPOPT_COPIED(/;"	d
IPOPT_DEBMEAS	ip.h	/^#define    IPOPT_DEBMEAS /;"	d
IPOPT_EOL	ip.h	/^#define    IPOPT_EOL /;"	d
IPOPT_LSRR	ip.h	/^#define    IPOPT_LSRR /;"	d
IPOPT_MINOFF	ip.h	/^#define    IPOPT_MINOFF /;"	d
IPOPT_NOP	ip.h	/^#define    IPOPT_NOP /;"	d
IPOPT_NUMBER	ip.h	/^#define    IPOPT_NUMBER(/;"	d
IPOPT_OFFSET	ip.h	/^#define IPOPT_OFFSET /;"	d
IPOPT_OLEN	ip.h	/^#define    IPOPT_OLEN /;"	d
IPOPT_OPTVAL	ip.h	/^#define    IPOPT_OPTVAL /;"	d
IPOPT_RESERVED1	ip.h	/^#define    IPOPT_RESERVED1 /;"	d
IPOPT_RESERVED2	ip.h	/^#define    IPOPT_RESERVED2 /;"	d
IPOPT_RR	ip.h	/^#define    IPOPT_RR /;"	d
IPOPT_SATID	ip.h	/^#define    IPOPT_SATID /;"	d
IPOPT_SECURITY	ip.h	/^#define    IPOPT_SECURITY /;"	d
IPOPT_SECUR_CONFID	ip.h	/^#define    IPOPT_SECUR_CONFID /;"	d
IPOPT_SECUR_EFTO	ip.h	/^#define    IPOPT_SECUR_EFTO /;"	d
IPOPT_SECUR_MMMM	ip.h	/^#define    IPOPT_SECUR_MMMM /;"	d
IPOPT_SECUR_RESTR	ip.h	/^#define    IPOPT_SECUR_RESTR /;"	d
IPOPT_SECUR_SECRET	ip.h	/^#define    IPOPT_SECUR_SECRET /;"	d
IPOPT_SECUR_TOPSECRET	ip.h	/^#define    IPOPT_SECUR_TOPSECRET /;"	d
IPOPT_SECUR_UNCLASS	ip.h	/^#define    IPOPT_SECUR_UNCLASS /;"	d
IPOPT_SSRR	ip.h	/^#define    IPOPT_SSRR /;"	d
IPOPT_TS	ip.h	/^#define    IPOPT_TS /;"	d
IPOPT_TS_PRESPEC	ip.h	/^#define    IPOPT_TS_PRESPEC /;"	d
IPOPT_TS_TSANDADDR	ip.h	/^#define    IPOPT_TS_TSANDADDR /;"	d
IPOPT_TS_TSONLY	ip.h	/^#define    IPOPT_TS_TSONLY /;"	d
IPTOS_LOWDELAY	ip.h	/^#define    IPTOS_LOWDELAY /;"	d
IPTOS_PREC_CRITIC_ECP	ip.h	/^#define    IPTOS_PREC_CRITIC_ECP /;"	d
IPTOS_PREC_FLASH	ip.h	/^#define    IPTOS_PREC_FLASH /;"	d
IPTOS_PREC_FLASHOVERRIDE	ip.h	/^#define    IPTOS_PREC_FLASHOVERRIDE /;"	d
IPTOS_PREC_IMMEDIATE	ip.h	/^#define    IPTOS_PREC_IMMEDIATE /;"	d
IPTOS_PREC_INTERNETCONTROL	ip.h	/^#define    IPTOS_PREC_INTERNETCONTROL /;"	d
IPTOS_PREC_NETCONTROL	ip.h	/^#define    IPTOS_PREC_NETCONTROL /;"	d
IPTOS_PREC_PRIORITY	ip.h	/^#define    IPTOS_PREC_PRIORITY /;"	d
IPTOS_PREC_ROUTINE	ip.h	/^#define    IPTOS_PREC_ROUTINE /;"	d
IPTOS_RELIABILITY	ip.h	/^#define    IPTOS_RELIABILITY /;"	d
IPTOS_THROUGHPUT	ip.h	/^#define    IPTOS_THROUGHPUT /;"	d
IPTS_FLG	ip.h	/^#define IPTS_FLG(/;"	d
IPTS_OFLW	ip.h	/^#define IPTS_OFLW(/;"	d
IPTTLDEC	ip.h	/^#define    IPTTLDEC /;"	d
IPVERSION	ip.h	/^#define    IPVERSION /;"	d
IP_DF	ip.h	/^#define    IP_DF /;"	d
IP_HL	ip.h	/^#define IP_HL(/;"	d
IP_MAXPACKET	ip.h	/^#define    IP_MAXPACKET /;"	d
IP_MF	ip.h	/^#define    IP_MF /;"	d
IP_MSS	ip.h	/^#define    IP_MSS /;"	d
IP_OFFMASK	ip.h	/^#define    IP_OFFMASK /;"	d
IP_V	ip.h	/^#define IP_V(/;"	d
IS_SOURCE_ROUTED	token.h	/^#define IS_SOURCE_ROUTED(/;"	d
LARGEST_FRAME	token.h	/^#define LARGEST_FRAME(/;"	d
LINUX_SLL_BROADCAST	sll.h	/^#define LINUX_SLL_BROADCAST /;"	d
LINUX_SLL_HOST	sll.h	/^#define LINUX_SLL_HOST /;"	d
LINUX_SLL_MULTICAST	sll.h	/^#define LINUX_SLL_MULTICAST /;"	d
LINUX_SLL_OTHERHOST	sll.h	/^#define LINUX_SLL_OTHERHOST /;"	d
LINUX_SLL_OUTGOING	sll.h	/^#define LINUX_SLL_OUTGOING /;"	d
LINUX_SLL_P_802_2	sll.h	/^#define LINUX_SLL_P_802_2 /;"	d
LINUX_SLL_P_802_3	sll.h	/^#define LINUX_SLL_P_802_3 /;"	d
LLCSAP_8021B_G	llc.h	/^#define    LLCSAP_8021B_G /;"	d
LLCSAP_8021B_I	llc.h	/^#define    LLCSAP_8021B_I /;"	d
LLCSAP_8021D	llc.h	/^#define    LLCSAP_8021D /;"	d
LLCSAP_GLOBAL	llc.h	/^#define    LLCSAP_GLOBAL /;"	d
LLCSAP_IP	llc.h	/^#define    LLCSAP_IP /;"	d
LLCSAP_IPX	llc.h	/^#define LLCSAP_IPX /;"	d
LLCSAP_ISO8208	llc.h	/^#define    LLCSAP_ISO8208 /;"	d
LLCSAP_ISONS	llc.h	/^#define    LLCSAP_ISONS /;"	d
LLCSAP_NETBEUI	llc.h	/^#define LLCSAP_NETBEUI /;"	d
LLCSAP_NULL	llc.h	/^#define    LLCSAP_NULL /;"	d
LLCSAP_PROWAY	llc.h	/^#define    LLCSAP_PROWAY /;"	d
LLCSAP_PROWAYNM	llc.h	/^#define    LLCSAP_PROWAYNM /;"	d
LLCSAP_RS511	llc.h	/^#define    LLCSAP_RS511 /;"	d
LLCSAP_SNAP	llc.h	/^#define    LLCSAP_SNAP /;"	d
LLC_DISC	llc.h	/^#define    LLC_DISC /;"	d
LLC_DM	llc.h	/^#define    LLC_DM /;"	d
LLC_FRMR	llc.h	/^#define    LLC_FRMR /;"	d
LLC_GSAP	llc.h	/^#define    LLC_GSAP /;"	d
LLC_IS_NR	llc.h	/^#define LLC_IS_NR(/;"	d
LLC_IS_POLL	llc.h	/^#define    LLC_IS_POLL /;"	d
LLC_I_NS	llc.h	/^#define LLC_I_NS(/;"	d
LLC_REJ	llc.h	/^#define    LLC_REJ /;"	d
LLC_RNR	llc.h	/^#define    LLC_RNR /;"	d
LLC_RR	llc.h	/^#define    LLC_RR /;"	d
LLC_SABME	llc.h	/^#define    LLC_SABME /;"	d
LLC_S_CMD	llc.h	/^#define    LLC_S_CMD(/;"	d
LLC_S_FMT	llc.h	/^#define LLC_S_FMT /;"	d
LLC_TEST	llc.h	/^#define    LLC_TEST /;"	d
LLC_UA	llc.h	/^#define    LLC_UA /;"	d
LLC_UI	llc.h	/^#define    LLC_UI /;"	d
LLC_U_CMD	llc.h	/^#define    LLC_U_CMD(/;"	d
LLC_U_FMT	llc.h	/^#define    LLC_U_FMT /;"	d
LLC_U_POLL	llc.h	/^#define    LLC_U_POLL /;"	d
LLC_XID	llc.h	/^#define    LLC_XID /;"	d
LLC_XID_FI	llc.h	/^#define    LLC_XID_FI /;"	d
MAGENTA_FOREGROUND	ui.c	/^#define MAGENTA_FOREGROUND /;"	d	file:
MAXDLADDR	dlcommon.h	/^#define        MAXDLADDR /;"	d
MAXDLBUF	dlcommon.h	/^#define        MAXDLBUF /;"	d
MAXTTL	ip.h	/^#define    MAXTTL /;"	d
MAXWAIT	dlcommon.h	/^#define        MAXWAIT /;"	d
MAX_CONFIG_LINE	cfgfile.c	/^#define MAX_CONFIG_LINE /;"	d	file:
NAMESIZE	resolver.c	/^#define NAMESIZE /;"	d	file:
NONBOLD	ui.c	/^#define NONBOLD /;"	d	file:
OFFADDR	dlcommon.h	/^#define        OFFADDR(/;"	d
OPTION_LINEDISPLAY_ONE_LINE_BOTH	options.h	/^    OPTION_LINEDISPLAY_ONE_LINE_BOTH,$/;"	e	enum:__anon15
OPTION_LINEDISPLAY_ONE_LINE_RECV	options.h	/^    OPTION_LINEDISPLAY_ONE_LINE_RECV,$/;"	e	enum:__anon15
OPTION_LINEDISPLAY_ONE_LINE_SENT	options.h	/^    OPTION_LINEDISPLAY_ONE_LINE_SENT$/;"	e	enum:__anon15
OPTION_LINEDISPLAY_TWO_LINE	options.h	/^    OPTION_LINEDISPLAY_TWO_LINE,$/;"	e	enum:__anon15
OPTION_PORTS_DEST	options.h	/^    OPTION_PORTS_DEST,$/;"	e	enum:__anon13
OPTION_PORTS_OFF	options.h	/^    OPTION_PORTS_OFF,$/;"	e	enum:__anon13
OPTION_PORTS_ON	options.h	/^    OPTION_PORTS_ON$/;"	e	enum:__anon13
OPTION_PORTS_SRC	options.h	/^    OPTION_PORTS_SRC,$/;"	e	enum:__anon13
OPTION_SORT_DEST	options.h	/^    OPTION_SORT_DEST$/;"	e	enum:__anon14
OPTION_SORT_DIV1	options.h	/^    OPTION_SORT_DIV1,$/;"	e	enum:__anon14
OPTION_SORT_DIV2	options.h	/^    OPTION_SORT_DIV2,$/;"	e	enum:__anon14
OPTION_SORT_DIV3	options.h	/^    OPTION_SORT_DIV3,$/;"	e	enum:__anon14
OPTION_SORT_SRC	options.h	/^    OPTION_SORT_SRC,$/;"	e	enum:__anon14
OUI_APPLETALK	llc.h	/^#define    OUI_APPLETALK /;"	d
OUI_CISCO	llc.h	/^#define    OUI_CISCO /;"	d
OUI_CISCO_90	llc.h	/^#define    OUI_CISCO_90 /;"	d
OUI_ENCAP_ETHER	llc.h	/^#define    OUI_ENCAP_ETHER /;"	d
PACKAGE	config.h	/^#define PACKAGE /;"	d
PACKAGE_BUGREPORT	config.h	/^#define PACKAGE_BUGREPORT /;"	d
PACKAGE_NAME	config.h	/^#define PACKAGE_NAME /;"	d
PACKAGE_STRING	config.h	/^#define PACKAGE_STRING /;"	d
PACKAGE_TARNAME	config.h	/^#define PACKAGE_TARNAME /;"	d
PACKAGE_URL	config.h	/^#define PACKAGE_URL /;"	d
PACKAGE_VERSION	config.h	/^#define PACKAGE_VERSION /;"	d
PEAK_LABEL_COLOR	ui.c	/^int PEAK_LABEL_COLOR[] = {MAGENTA_FOREGROUND, BOLD};$/;"	v
PEAK_TRANSFER_COLUMN_COLOR	ui.c	/^int PEAK_TRANSFER_COLUMN_COLOR[] = {YELLOW_FOREGROUND, BOLD};$/;"	v
PPP_ADDRESS	ppp.h	/^#define PPP_ADDRESS /;"	d
PPP_APPLE	ppp.h	/^#define PPP_APPLE /;"	d
PPP_APPLECP	ppp.h	/^#define PPP_APPLECP /;"	d
PPP_BACP	ppp.h	/^#define PPP_BACP /;"	d
PPP_BAP	ppp.h	/^#define PPP_BAP /;"	d
PPP_BRPDU	ppp.h	/^#define PPP_BRPDU /;"	d
PPP_CCP	ppp.h	/^#define PPP_CCP /;"	d
PPP_CHAP	ppp.h	/^#define PPP_CHAP /;"	d
PPP_COMP	ppp.h	/^#define    PPP_COMP /;"	d
PPP_CONTROL	ppp.h	/^#define PPP_CONTROL /;"	d
PPP_DECNET	ppp.h	/^#define PPP_DECNET /;"	d
PPP_DECNETCP	ppp.h	/^#define PPP_DECNETCP /;"	d
PPP_HDRLEN	ppp.h	/^#define PPP_HDRLEN /;"	d
PPP_HELLO	ppp.h	/^#define PPP_HELLO /;"	d
PPP_IP	ppp.h	/^#define PPP_IP /;"	d
PPP_IPCP	ppp.h	/^#define PPP_IPCP /;"	d
PPP_IPV6	ppp.h	/^#define PPP_IPV6 /;"	d
PPP_IPV6CP	ppp.h	/^#define PPP_IPV6CP /;"	d
PPP_IPX	ppp.h	/^#define PPP_IPX /;"	d
PPP_IPXCP	ppp.h	/^#define PPP_IPXCP /;"	d
PPP_LCP	ppp.h	/^#define PPP_LCP /;"	d
PPP_LQM	ppp.h	/^#define PPP_LQM /;"	d
PPP_LUXCOM	ppp.h	/^#define PPP_LUXCOM /;"	d
PPP_MP	ppp.h	/^#define PPP_MP /;"	d
PPP_NS	ppp.h	/^#define PPP_NS /;"	d
PPP_NSCP	ppp.h	/^#define PPP_NSCP /;"	d
PPP_OSI	ppp.h	/^#define PPP_OSI /;"	d
PPP_OSICP	ppp.h	/^#define PPP_OSICP /;"	d
PPP_PAP	ppp.h	/^#define PPP_PAP /;"	d
PPP_SNS	ppp.h	/^#define PPP_SNS /;"	d
PPP_STII	ppp.h	/^#define PPP_STII /;"	d
PPP_STIICP	ppp.h	/^#define PPP_STIICP /;"	d
PPP_VINES	ppp.h	/^#define PPP_VINES /;"	d
PPP_VINESCP	ppp.h	/^#define PPP_VINESCP /;"	d
PPP_VJC	ppp.h	/^#define PPP_VJC /;"	d
PPP_VJNC	ppp.h	/^#define PPP_VJNC /;"	d
RATES_LABEL_COLOR	ui.c	/^int RATES_LABEL_COLOR[] = {MAGENTA_FOREGROUND, BOLD};$/;"	v
RECEIVE_BAR_COLOR	ui.c	/^int RECEIVE_BAR_COLOR[] = {GREEN_FOREGROUND, BOLD};$/;"	v
RED_FOREGROUND	ui.c	/^#define RED_FOREGROUND /;"	d	file:
RESOLUTION	iftop.h	/^#define RESOLUTION /;"	d
RESOLVE_QUEUE_LENGTH	resolver.c	/^#define RESOLVE_QUEUE_LENGTH /;"	d	file:
RIF_LENGTH	token.h	/^#define RIF_LENGTH(/;"	d
RING_NUMBER	token.h	/^#define RING_NUMBER(/;"	d
ROUTING_SEGMENT_MAX	token.h	/^#define ROUTING_SEGMENT_MAX /;"	d
SCALE_BAR_COLOR	ui.c	/^int SCALE_BAR_COLOR[] = {BLUE_FOREGROUND, BOLD};$/;"	v
SCALE_MARKERS_COLOR	ui.c	/^int SCALE_MARKERS_COLOR[] = {BLUE_FOREGROUND, BOLD};$/;"	v
SEGMENT_COUNT	token.h	/^#define SEGMENT_COUNT(/;"	d
SENT_BAR_COLOR	ui.c	/^int SENT_BAR_COLOR[] = {BLUE_FOREGROUND, BOLD};$/;"	v
SIZEOF_U_INT16_T	config.h	/^#define SIZEOF_U_INT16_T /;"	d
SIZEOF_U_INT32_T	config.h	/^#define SIZEOF_U_INT32_T /;"	d
SIZEOF_U_INT8_T	config.h	/^#define SIZEOF_U_INT8_T /;"	d
SLL_ADDRLEN	sll.h	/^#define SLL_ADDRLEN /;"	d
SLL_HDR_LEN	sll.h	/^#define SLL_HDR_LEN /;"	d
STDC_HEADERS	config.h	/^#define STDC_HEADERS /;"	d
TCPOLEN_MAXSEG	tcp.h	/^#define    TCPOLEN_MAXSEG /;"	d
TCPOLEN_TIMESTAMP	tcp.h	/^#define    TCPOLEN_TIMESTAMP /;"	d
TCPOLEN_TSTAMP_APPA	tcp.h	/^#define    TCPOLEN_TSTAMP_APPA /;"	d
TCPOPT_CC	tcp.h	/^#define TCPOPT_CC /;"	d
TCPOPT_CCECHO	tcp.h	/^#define TCPOPT_CCECHO /;"	d
TCPOPT_CCNEW	tcp.h	/^#define TCPOPT_CCNEW /;"	d
TCPOPT_ECHO	tcp.h	/^#define    TCPOPT_ECHO /;"	d
TCPOPT_ECHOREPLY	tcp.h	/^#define    TCPOPT_ECHOREPLY /;"	d
TCPOPT_EOL	tcp.h	/^#define    TCPOPT_EOL /;"	d
TCPOPT_MAXSEG	tcp.h	/^#define    TCPOPT_MAXSEG /;"	d
TCPOPT_NOP	tcp.h	/^#define    TCPOPT_NOP /;"	d
TCPOPT_SACK	tcp.h	/^#define    TCPOPT_SACK /;"	d
TCPOPT_SACKOK	tcp.h	/^#define    TCPOPT_SACKOK /;"	d
TCPOPT_TIMESTAMP	tcp.h	/^#define TCPOPT_TIMESTAMP /;"	d
TCPOPT_TSTAMP_HDR	tcp.h	/^#define TCPOPT_TSTAMP_HDR /;"	d
TCPOPT_WSCALE	tcp.h	/^#define    TCPOPT_WSCALE /;"	d
TEN_SECOND_TRANSFER_COLUMN_COLOR	ui.c	/^int TEN_SECOND_TRANSFER_COLUMN_COLOR[] = {CYAN_FOREGROUND, BOLD};$/;"	v
TH_ACK	tcp.h	/^#define    TH_ACK /;"	d
TH_CWR	tcp.h	/^#define TH_CWR /;"	d
TH_ECNECHO	tcp.h	/^#define TH_ECNECHO /;"	d
TH_FIN	tcp.h	/^#define    TH_FIN /;"	d
TH_OFF	tcp.h	/^#define TH_OFF(/;"	d
TH_PUSH	tcp.h	/^#define    TH_PUSH /;"	d
TH_RST	tcp.h	/^#define    TH_RST /;"	d
TH_SYN	tcp.h	/^#define    TH_SYN /;"	d
TH_URG	tcp.h	/^#define    TH_URG /;"	d
TIME_WITH_SYS_TIME	config.h	/^#define TIME_WITH_SYS_TIME /;"	d
TOKEN_FC_LLC	token.h	/^#define TOKEN_FC_LLC /;"	d
TOKEN_HDRLEN	token.h	/^#define TOKEN_HDRLEN /;"	d
TOKEN_RING_MAC_LEN	token.h	/^#define TOKEN_RING_MAC_LEN /;"	d
TOTAL_LABEL_COLOR	ui.c	/^int TOTAL_LABEL_COLOR[] = {BLUE_FOREGROUND, BOLD};$/;"	v
TWO_SECOND_TRANSFER_COLUMN_COLOR	ui.c	/^int TWO_SECOND_TRANSFER_COLUMN_COLOR[] = {BLUE_FOREGROUND, NONBOLD};$/;"	v
UNIT_DIVISIONS	ui.c	/^#define UNIT_DIVISIONS /;"	d	file:
USE_GETHOSTBYADDR	config.h	/^#define USE_GETHOSTBYADDR /;"	d
VERSION	config.h	/^#define VERSION /;"	d
WHITE_FOREGROUND	ui.c	/^#define WHITE_FOREGROUND /;"	d	file:
YELLOW_FOREGROUND	ui.c	/^#define YELLOW_FOREGROUND /;"	d	file:
__ADDR_HASH_H_	addr_hash.h	/^#define __ADDR_HASH_H_$/;"	d
__CFGFILE_H_	cfgfile.h	/^#define __CFGFILE_H_$/;"	d
__ETHER_H_	ether.h	/^#define __ETHER_H_$/;"	d
__GETCOLORS_H	getColors.h	/^#define __GETCOLORS_H$/;"	d
__HASH_H_	hash.h	/^#define __HASH_H_$/;"	d
__IFTOP_H_	iftop.h	/^#define __IFTOP_H_$/;"	d
__INTEGERS_H_	integers.h	/^#define __INTEGERS_H_$/;"	d
__NS_HASH_H_	ns_hash.h	/^#define __NS_HASH_H_$/;"	d
__OPTIONS_H_	options.h	/^#define __OPTIONS_H_$/;"	d
__RESOLVER_H_	resolver.h	/^#define __RESOLVER_H_$/;"	d
__SCREENFILTER_H_	screenfilter.h	/^#define __SCREENFILTER_H_$/;"	d
__SERV_HASH_H_	serv_hash.h	/^#define __SERV_HASH_H_$/;"	d
__SORTED_LIST_H_	sorted_list.h	/^#define __SORTED_LIST_H_$/;"	d
__STRINGMAP_H_	stringmap.h	/^#define __STRINGMAP_H_$/;"	d
__UI_H_	ui.h	/^#define __UI_H_$/;"	d
__VECTOR_H_	vector.h	/^#define __VECTOR_H_$/;"	d
_inline	vector.h	/^#define _inline /;"	d
_item	vector.h	/^typedef union _item {$/;"	u
_stringmap	stringmap.h	/^typedef struct _stringmap {$/;"	s
_vector	vector.h	/^typedef struct _vector {$/;"	s
action	iftop.h	/^    unsigned char action;$/;"	m	struct:pfloghdr
addr	resolver.c	/^    struct in_addr *addr;$/;"	m	struct:ares_callback_comm	typeref:struct:ares_callback_comm::in_addr	file:
addr	resolver.c	/^    } addr;$/;"	m	struct:addr_storage	typeref:union:addr_storage::__anon1	file:
addr4	resolver.c	/^        struct in_addr addr4;$/;"	m	union:addr_storage::__anon1	typeref:struct:addr_storage::__anon1::in_addr	file:
addr6	resolver.c	/^        struct in6_addr addr6;$/;"	m	union:addr_storage::__anon1	typeref:struct:addr_storage::__anon1::in6_addr	file:
addr_hash_create	addr_hash.c	/^hash_type *addr_hash_create() {$/;"	f
addr_pair	addr_hash.h	/^} addr_pair;$/;"	t	typeref:struct:__anon3
addr_storage	resolver.c	/^struct addr_storage {$/;"	s	file:
addrtostring	dlcommon.c	/^addrtostring(addr, length, s)$/;"	f
af	addr_hash.h	/^    int af;$/;"	m	struct:__anon3
af	iftop.h	/^    unsigned char af;$/;"	m	struct:pfloghdr
af	resolver.c	/^    int af;                     \/* AF_INET or AF_INET6 *\/$/;"	m	struct:addr_storage	file:
aggregate_dest	options.h	/^    int aggregate_dest;$/;"	m	struct:__anon16
aggregate_src	options.h	/^    int aggregate_src;$/;"	m	struct:__anon16
analyse_data	ui.c	/^void analyse_data() {$/;"	f
ap	ui.c	/^    addr_pair ap;$/;"	m	struct:host_pair_line_tag	file:
ares_callback_comm	resolver.c	/^struct ares_callback_comm {$/;"	s	file:
arg	threadprof.c	/^    void *arg;$/;"	m	struct:wrapper_s	file:
ary	vector.h	/^    item *ary;$/;"	m	struct:_vector
as_addr4	resolver.c	/^#define as_addr4 /;"	d	file:
as_addr6	resolver.c	/^#define as_addr6 /;"	d	file:
assign_addr_pair	iftop.c	/^void assign_addr_pair(addr_pair *ap, struct ip *iptr, int flip) {$/;"	f
bad_interface_names	options.c	/^static char *bad_interface_names[] = {$/;"	v	file:
bandwidth_in_bytes	options.h	/^    int bandwidth_in_bytes;$/;"	m	struct:__anon16
bar_interval	options.h	/^    int bar_interval;$/;"	m	struct:__anon16
calculate_totals	ui.c	/^void calculate_totals() {$/;"	f
compare	addr_hash.c	/^int compare(void *a, void *b) {$/;"	f
compare	hash.h	/^    int (*compare)(void *, void *);$/;"	m	struct:__anon8
compare	sorted_list.h	/^    int (*compare)(void *, void *);$/;"	m	struct:__anon18
config	cfgfile.c	/^stringmap config;$/;"	v
config_directives	cfgfile.c	/^char *config_directives[] = {$/;"	v
config_enumeration_type	cfgfile.h	/^} config_enumeration_type;$/;"	t	typeref:struct:__anon6
config_file	options.h	/^    char *config_file;$/;"	m	struct:__anon16
config_file_specified	options.h	/^    int config_file_specified;$/;"	m	struct:__anon16
config_get_bool	cfgfile.c	/^int config_get_bool(const char *directive) {$/;"	f
config_get_enum	cfgfile.c	/^int config_get_enum(const char *directive, config_enumeration_type *enumeration, int *value) {$/;"	f
config_get_float	cfgfile.c	/^int config_get_float(const char *directive, float *value) {$/;"	f
config_get_int	cfgfile.c	/^int config_get_int(const char *directive, int *value) {$/;"	f
config_get_string	cfgfile.c	/^char *config_get_string(const char *directive) {$/;"	f
config_init	cfgfile.c	/^int config_init() {$/;"	f
config_set_string	cfgfile.c	/^void config_set_string(const char *directive, const char *s) {$/;"	f
convertBoldToInt	getColors.c	/^int convertBoldToInt(char *bold) {$/;"	f
convertBoldToInt	ui.c	/^int convertBoldToInt(char *bold) {$/;"	f
convertColorToInt	getColors.c	/^int convertColorToInt(char *color) {$/;"	f
convertColorToInt	ui.c	/^int convertColorToInt(char *color) {$/;"	f
copy_key	addr_hash.c	/^void *copy_key(void *orig) {$/;"	f
copy_key	hash.h	/^    void *(*copy_key)(void *);$/;"	m	struct:__anon8
ctl	llc.h	/^    } ctl;$/;"	m	struct:llc	typeref:union:llc::__anon10
d	stringmap.h	/^    item d;$/;"	m	struct:_stringmap
data	sorted_list.h	/^    void *data;$/;"	m	struct:sorted_list_node_tag
delete_key	addr_hash.c	/^void delete_key(void *key) {$/;"	f
delete_key	hash.h	/^    void (*delete_key)(void *);$/;"	m	struct:__anon8
die	options.c	/^static void die(char *msg) {$/;"	f	file:
dir	iftop.h	/^    unsigned char dir;$/;"	m	struct:pfloghdr
dlattachreq	dlcommon.c	/^dlattachreq(fd, ppa)$/;"	f
dlbindack	dlcommon.c	/^dlbindack(fd, bufp)$/;"	f
dlbindreq	dlcommon.c	/^dlbindreq(fd, sap, max_conind, service_mode, conn_mgmt, xidtest)$/;"	f
dldetachreq	dlcommon.c	/^dldetachreq(fd)$/;"	f
dldisabmultireq	dlcommon.c	/^dldisabmultireq(fd, addr, length)$/;"	f
dlenabmultireq	dlcommon.c	/^dlenabmultireq(fd, addr, length)$/;"	f
dlerrno	dlcommon.c	/^dlerrno(errno)$/;"	f
dlerrorack	dlcommon.c	/^dlerrorack(fd, bufp)$/;"	f
dlinfoack	dlcommon.c	/^dlinfoack(fd, bufp)$/;"	f
dlinforeq	dlcommon.c	/^dlinforeq(fd)$/;"	f
dlmactype	dlcommon.c	/^dlmactype(media)$/;"	f
dlokack	dlcommon.c	/^dlokack(fd, bufp)$/;"	f
dlphysaddrack	dlcommon.c	/^dlphysaddrack(fd, bufp)$/;"	f
dlphysaddrreq	dlcommon.c	/^dlphysaddrreq(fd, addrtype)$/;"	f
dlprim	dlcommon.c	/^dlprim(prim)$/;"	f
dlpromisclevel	dlcommon.c	/^dlpromisclevel(level)$/;"	f
dlpromiscoff	dlcommon.c	/^dlpromiscoff(fd, level)$/;"	f
dlpromisconreq	dlcommon.c	/^dlpromisconreq(fd, level)$/;"	f
dlservicemode	dlcommon.c	/^dlservicemode(servicemode)$/;"	f
dlsetphysaddrreq	dlcommon.c	/^dlsetphysaddrreq(fd, addr, length)$/;"	f
dlstate	dlcommon.c	/^dlstate(state)$/;"	f
dlstyle	dlcommon.c	/^dlstyle(style)$/;"	f
dlunbindreq	dlcommon.c	/^dlunbindreq(fd)$/;"	f
dlunitdatareq	dlcommon.c	/^dlunitdatareq(fd, addrp, addrlen, minpri, maxpri, datap, datalen)$/;"	f
dnsresolution	options.h	/^    int dnsresolution;$/;"	m	struct:__anon16
do_resolve	resolver.c	/^char *do_resolve(struct addr_storage * addr) {$/;"	f
do_resolve	resolver.c	/^char *do_resolve(struct addr_storage *addr) {$/;"	f
do_resolve	resolver.c	/^char *do_resolve(struct in6_addr *addr) {$/;"	f
do_resolve	resolver.c	/^char* do_resolve(struct addr_storage *addr) {$/;"	f
do_resolve_ares_callback	resolver.c	/^static void do_resolve_ares_callback(void *arg, int status, unsigned char *abuf, int alen) {$/;"	f	file:
dontshowdisplay	ui.c	/^int dontshowdisplay = 0;$/;"	v
draw_bar	ui.c	/^void draw_bar(float n, int y, short colorpair) {$/;"	f
draw_bar_scale	ui.c	/^static void draw_bar_scale(int *y) {$/;"	f	file:
draw_line_total	ui.c	/^void draw_line_total(float sent, float recv, int y, int x, option_linedisplay_t linedisplay, int bytes) {$/;"	f
draw_line_totals	ui.c	/^void draw_line_totals(int y, host_pair_line *line, option_linedisplay_t linedisplay) {$/;"	f
draw_totals	ui.c	/^void draw_totals(host_pair_line *totals) {$/;"	f
dsap	llc.h	/^    u_int8_t dsap;$/;"	m	struct:llc
dst	addr_hash.h	/^        struct in_addr dst;$/;"	m	union:__anon3::__anon5	typeref:struct:__anon3::__anon5::in_addr
dst6	addr_hash.h	/^        struct in6_addr dst6;$/;"	m	union:__anon3::__anon5	typeref:struct:__anon3::__anon5::in6_addr
dst_port	addr_hash.h	/^    unsigned short int dst_port;$/;"	m	struct:__anon3
edline	edline.c	/^char *edline(int linenum, const char *prompt, const char *initial) {$/;"	f
eraseAndLoop	ui.c	/^void eraseAndLoop() {$/;"	f
err	dlcommon.c	/^err(fmt, a1, a2, a3, a4)$/;"	f
ether_dhost	ether.h	/^    u_int8_t ether_dhost[ETHER_ADDR_LEN];$/;"	m	struct:ether_header
ether_header	ether.h	/^struct ether_header {$/;"	s
ether_shost	ether.h	/^    u_int8_t ether_shost[ETHER_ADDR_LEN];$/;"	m	struct:ether_header
ether_type	ether.h	/^    u_int16_t ether_type;$/;"	m	struct:ether_header
ether_type	ether.h	/^    u_int16_t ether_type;$/;"	m	struct:vlan_8021q_header
expecting	dlcommon.c	/^expecting(prim, dlp)$/;"	f
filtercode	options.h	/^    char *filtercode;$/;"	m	struct:__anon16
finish	iftop.c	/^static void finish(int sig) {$/;"	f	file:
foad	iftop.c	/^sig_atomic_t foad;$/;"	v
forking_resolver_worker	resolver.c	/^int forking_resolver_worker(int fd) {$/;"	f
freezeorder	options.h	/^    int freezeorder;$/;"	m	struct:__anon16
g	stringmap.h	/^    struct _stringmap *l, *g;$/;"	m	struct:_stringmap	typeref:struct:_stringmap::
getColors	getColors.c	/^void getColors() {$/;"	f
getColors	ui.c	/^void getColors() {$/;"	f
get_addrs_dlpi	addrs_dlpi.c	/^get_addrs_dlpi(char *interface, char if_hw_addr[], struct in_addr *if_ip_addr)$/;"	f
get_addrs_ioctl	addrs_ioctl.c	/^get_addrs_ioctl(char *interface, char if_hw_addr[], struct in_addr *if_ip_addr, struct in6_addr *if_ip6_addr) {$/;"	f
get_bar_interval	ui.c	/^static int get_bar_interval(float bandwidth) {$/;"	f	file:
get_bar_length	ui.c	/^static int get_bar_length(const int rate) {$/;"	f	file:
get_first_interface	options.c	/^static char *get_first_interface(void) {$/;"	f	file:
get_max_bandwidth	ui.c	/^static float get_max_bandwidth() {$/;"	f	file:
gprof_pthread_create	threadprof.c	/^int gprof_pthread_create(pthread_t *thread, pthread_attr_t *attr,$/;"	f
handle_cooked_packet	iftop.c	/^static void handle_cooked_packet(unsigned char *args, const struct pcap_pkthdr *thdr, const unsigned char *packet) {$/;"	f	file:
handle_eth_packet	iftop.c	/^static void handle_eth_packet(unsigned char *args, const struct pcap_pkthdr *pkthdr, const unsigned char *packet) {$/;"	f	file:
handle_ip_packet	iftop.c	/^static void handle_ip_packet(struct ip *iptr, int hw_dir) {$/;"	f	file:
handle_llc_packet	iftop.c	/^static void handle_llc_packet(const struct llc *llc, int dir) {$/;"	f	file:
handle_null_packet	iftop.c	/^static void handle_null_packet(unsigned char *args, const struct pcap_pkthdr *pkthdr, const unsigned char *packet) {$/;"	f	file:
handle_pflog_packet	iftop.c	/^static void handle_pflog_packet(unsigned char *args, const struct pcap_pkthdr *pkthdr, const unsigned char *packet) {$/;"	f	file:
handle_ppp_packet	iftop.c	/^static void handle_ppp_packet(unsigned char *args, const struct pcap_pkthdr *pkthdr, const unsigned char *packet) {$/;"	f	file:
handle_radiotap_packet	iftop.c	/^static void handle_radiotap_packet(unsigned char *args, const struct pcap_pkthdr *pkthdr, const unsigned char *packet) {$/;"	f	file:
handle_raw_packet	iftop.c	/^static void handle_raw_packet(unsigned char *args, const struct pcap_pkthdr *pkthdr, const unsigned char *packet) {$/;"	f	file:
handle_tokenring_packet	iftop.c	/^handle_tokenring_packet(unsigned char *args, const struct pcap_pkthdr *pkthdr, const unsigned char *packet) {$/;"	f	file:
hash	addr_hash.c	/^int hash(void *key) {$/;"	f
hash	hash.h	/^    int (*hash)(void *);$/;"	m	struct:__anon8
hash_delete	hash.c	/^hash_status_enum hash_delete(hash_type *hash_table, void *key) {$/;"	f
hash_delete_all	hash.c	/^void hash_delete_all(hash_type *hash_table) {$/;"	f
hash_destroy	hash.c	/^hash_status_enum hash_destroy(hash_type *hash_table) {$/;"	f
hash_find	hash.c	/^hash_status_enum hash_find(hash_type *hash_table, void *key, void **rec) {$/;"	f
hash_initialise	hash.c	/^hash_status_enum hash_initialise(hash_type *hash_table) {$/;"	f
hash_insert	hash.c	/^hash_status_enum hash_insert(hash_type *hash_table, void *key, void *rec) {$/;"	f
hash_next_item	hash.c	/^hash_status_enum hash_next_item(hash_type *hash_table, hash_node_type **ppnode) {$/;"	f
hash_node_type	hash.h	/^} hash_node_type;$/;"	t	typeref:struct:node_tag
hash_status_enum	hash.h	/^} hash_status_enum;$/;"	t	typeref:enum:__anon7
hash_table_size	addr_hash.c	/^#define hash_table_size /;"	d	file:
hash_table_size	ns_hash.c	/^#define hash_table_size /;"	d	file:
hash_table_size	serv_hash.c	/^#define hash_table_size /;"	d	file:
hash_type	hash.h	/^} hash_type;$/;"	t	typeref:struct:__anon8
hash_uint32	addr_hash.c	/^static int __inline__ hash_uint32(uint32_t n) {$/;"	f	file:
hash_uint32	ns_hash.c	/^static int __inline__ hash_uint32(uint32_t n) {$/;"	f	file:
have_hw_addr	iftop.c	/^int have_hw_addr = 0;$/;"	v
have_ip6_addr	iftop.c	/^int have_ip6_addr = 0;$/;"	v
have_ip_addr	iftop.c	/^int have_ip_addr = 0;$/;"	v
head	resolver.c	/^int head;$/;"	v
helpmsg	ui.c	/^char helpmsg[HELP_MSG_SIZE];$/;"	v
helptimer	ui.c	/^time_t helptimer = 0;$/;"	v
hexnibble	dlcommon.c	/^hexnibble(c)$/;"	f	file:
history	iftop.c	/^hash_type *history;$/;"	v
history_create	iftop.c	/^history_type *history_create() {$/;"	f
history_divs	ui.c	/^int history_divs[HISTORY_DIVISIONS] = {1, 5, 20};$/;"	v
history_len	iftop.c	/^int history_len = 1;$/;"	v
history_length	ui.c	/^int history_length(const int d) {$/;"	f
history_pos	iftop.c	/^int history_pos = 0;$/;"	v
history_rotate	iftop.c	/^void history_rotate() {$/;"	f
history_totals	iftop.c	/^history_type history_totals;$/;"	v
history_type	iftop.h	/^} history_type;$/;"	t	typeref:struct:__anon9
host_pair_line	ui.c	/^} host_pair_line;$/;"	t	typeref:struct:host_pair_line_tag	file:
host_pair_line_tag	ui.c	/^typedef struct host_pair_line_tag {$/;"	s	file:
if_hw_addr	iftop.c	/^unsigned char if_hw_addr[6];$/;"	v
if_ip6_addr	iftop.c	/^struct in6_addr if_ip6_addr;$/;"	v	typeref:struct:in6_addr
if_ip_addr	iftop.c	/^struct in_addr if_ip_addr;$/;"	v	typeref:struct:in_addr
ifname	iftop.h	/^    char ifname[16];$/;"	m	struct:pfloghdr
in_filter_net	iftop.c	/^int in_filter_net(struct in_addr addr) {$/;"	f
inet_aton	options.c	/^#   define inet_aton(/;"	d	file:
init_history	iftop.c	/^void init_history() {$/;"	f
interface	options.h	/^    char *interface;$/;"	m	struct:__anon16
interval	ui.c	/^    int max, interval;$/;"	m	struct:__anon2	file:
ip	ip.h	/^struct ip {$/;"	s
ip6_addr_match	iftop.c	/^int __inline__ ip6_addr_match(struct in6_addr *addr) {$/;"	f
ip_addr_match	iftop.c	/^int __inline__ ip_addr_match(struct in_addr addr) {$/;"	f
ip_dst	ip.h	/^    struct in_addr ip_src, ip_dst;    \/* source and dest address *\/$/;"	m	struct:ip	typeref:struct:ip::
ip_id	ip.h	/^    u_int16_t ip_id;        \/* identification *\/$/;"	m	struct:ip
ip_len	ip.h	/^    u_int16_t ip_len;        \/* total length *\/$/;"	m	struct:ip
ip_off	ip.h	/^    u_int16_t ip_off;        \/* fragment offset field *\/$/;"	m	struct:ip
ip_p	ip.h	/^    u_int8_t ip_p;        \/* protocol *\/$/;"	m	struct:ip
ip_service	serv_hash.h	/^} ip_service;$/;"	t	typeref:struct:__anon17
ip_src	ip.h	/^    struct in_addr ip_src, ip_dst;    \/* source and dest address *\/$/;"	m	struct:ip	typeref:struct:ip::in_addr
ip_sum	ip.h	/^    u_int16_t ip_sum;        \/* checksum *\/$/;"	m	struct:ip
ip_timestamp	ip.h	/^struct ip_timestamp {$/;"	s
ip_tos	ip.h	/^    u_int8_t ip_tos;        \/* type of service *\/$/;"	m	struct:ip
ip_ttl	ip.h	/^    u_int8_t ip_ttl;        \/* time to live *\/$/;"	m	struct:ip
ip_vhl	ip.h	/^    u_int8_t ip_vhl;        \/* header length, version *\/$/;"	m	struct:ip
ipt_addr	ip.h	/^            struct in_addr ipt_addr;$/;"	m	struct:ip_timestamp::ipt_timestamp::ipt_ta	typeref:struct:ip_timestamp::ipt_timestamp::ipt_ta::in_addr
ipt_code	ip.h	/^    u_int8_t ipt_code;    \/* IPOPT_TS *\/$/;"	m	struct:ip_timestamp
ipt_len	ip.h	/^    u_int8_t ipt_len;    \/* size of structure (variable) *\/$/;"	m	struct:ip_timestamp
ipt_oflwflg	ip.h	/^    u_int8_t ipt_oflwflg;    \/* flags, overflow counter *\/$/;"	m	struct:ip_timestamp
ipt_ptr	ip.h	/^    u_int8_t ipt_ptr;    \/* index of current entry *\/$/;"	m	struct:ip_timestamp
ipt_ta	ip.h	/^        struct ipt_ta {$/;"	s	union:ip_timestamp::ipt_timestamp
ipt_ta	ip.h	/^        } ipt_ta[1];$/;"	m	union:ip_timestamp::ipt_timestamp	typeref:struct:ip_timestamp::ipt_timestamp::ipt_ta
ipt_time	ip.h	/^            u_int32_t ipt_time;$/;"	m	struct:ip_timestamp::ipt_timestamp::ipt_ta
ipt_time	ip.h	/^        u_int32_t ipt_time[1];$/;"	m	union:ip_timestamp::ipt_timestamp
ipt_timestamp	ip.h	/^    union ipt_timestamp {$/;"	u	struct:ip_timestamp
ipt_timestamp	ip.h	/^    } ipt_timestamp;$/;"	m	struct:ip_timestamp	typeref:union:ip_timestamp::ipt_timestamp
is_bad_interface_name	options.c	/^static int is_bad_interface_name(char *i) {$/;"	f	file:
is_cfgdirective_valid	cfgfile.c	/^int is_cfgdirective_valid(const char *s) {$/;"	f
is_ctl	llc.h	/^        u_int16_t is_ctl;$/;"	m	union:llc::__anon10
it_len	ether.h	/^    u_int16_t it_len;         \/* entire length *\/$/;"	m	struct:radiotap_header
it_pad	ether.h	/^    u_int8_t it_pad;$/;"	m	struct:radiotap_header
it_present	ether.h	/^    u_int32_t it_present;     \/* fields present *\/$/;"	m	struct:radiotap_header
it_version	ether.h	/^    u_int8_t it_version;     \/* set to 0 *\/$/;"	m	struct:radiotap_header
item	vector.h	/^} item;$/;"	t	typeref:union:_item
item_long	vector.h	/^static _inline item item_long(const long l) {$/;"	f
item_ptr	vector.h	/^static _inline item item_ptr(void *const v) {$/;"	f
itimer	threadprof.c	/^    struct itimerval itimer;$/;"	m	struct:wrapper_s	typeref:struct:wrapper_s::itimerval	file:
key	hash.h	/^    void *key;                \/* key *\/$/;"	m	struct:node_tag
key	stringmap.h	/^    char *key;$/;"	m	struct:_stringmap
key_type	addr_hash.h	/^typedef addr_pair key_type;      \/* index into hash table *\/$/;"	t
l	stringmap.h	/^    struct _stringmap *l, *g;$/;"	m	struct:_stringmap	typeref:struct:_stringmap::_stringmap
l	vector.h	/^    long l;$/;"	m	union:_item
last_timestamp	iftop.c	/^time_t last_timestamp;$/;"	v
last_write	iftop.h	/^    int last_write;$/;"	m	struct:__anon9
len	resolver.c	/^    int len;                    \/* sizeof(struct in_addr or in6_addr) *\/$/;"	m	struct:addr_storage	file:
length	iftop.h	/^    unsigned char length;$/;"	m	struct:pfloghdr
linedisplay	options.h	/^    option_linedisplay_t linedisplay;$/;"	m	struct:__anon16
linedisplay_enumeration	options.c	/^config_enumeration_type linedisplay_enumeration[] = {$/;"	v
link_local	options.h	/^    int link_local;$/;"	m	struct:__anon16
llc	llc.h	/^struct llc {$/;"	s
llc_ethertype	llc.h	/^#define    llc_ethertype /;"	d
llc_orgcode	llc.h	/^#define    llc_orgcode /;"	d
llcis	llc.h	/^#define    llcis /;"	d
llcpi	llc.h	/^#define    llcpi /;"	d
llcu	llc.h	/^#define    llcu /;"	d
llcui	llc.h	/^#define    llcui /;"	d
lock	threadprof.c	/^    pthread_mutex_t lock;$/;"	m	struct:wrapper_s	file:
log_scale	options.h	/^    int log_scale;$/;"	m	struct:__anon16
main	iftop.c	/^int main(int argc, char **argv) {$/;"	f
make_screen_list	ui.c	/^void make_screen_list() {$/;"	f
max	ui.c	/^    int max, interval;$/;"	m	struct:__anon2	file:
max_bandwidth	options.h	/^    long long max_bandwidth;$/;"	m	struct:__anon16
min	edline.c	/^static int min(const int a, const int b) {$/;"	f	file:
n	vector.h	/^    size_t n, n_used;$/;"	m	struct:_vector
n_used	vector.h	/^    size_t n, n_used;$/;"	m	struct:_vector
name	cfgfile.h	/^    char *name;$/;"	m	struct:__anon6
name	resolver.c	/^    char *name;$/;"	m	struct:ares_callback_comm	file:
netfilter	options.h	/^    int netfilter;$/;"	m	struct:__anon16
netfilter6	options.h	/^    int netfilter6;$/;"	m	struct:__anon16
netfilter6mask	options.h	/^    struct in6_addr netfilter6mask;$/;"	m	struct:__anon16	typeref:struct:__anon16::in6_addr
netfilter6net	options.h	/^    struct in6_addr netfilter6net;$/;"	m	struct:__anon16	typeref:struct:__anon16::in6_addr
netfiltermask	options.h	/^    struct in_addr netfiltermask;$/;"	m	struct:__anon16	typeref:struct:__anon16::in_addr
netfilternet	options.h	/^    struct in_addr netfilternet;$/;"	m	struct:__anon16	typeref:struct:__anon16::in_addr
next	hash.h	/^    struct node_tag *next;       \/* next node *\/$/;"	m	struct:node_tag	typeref:struct:node_tag::node_tag
next	sorted_list.h	/^    struct sorted_list_node_tag *next;$/;"	m	struct:sorted_list_node_tag	typeref:struct:sorted_list_node_tag::sorted_list_node_tag
node_tag	hash.h	/^typedef struct node_tag {$/;"	s
ns_hash	resolver.c	/^hash_type *ns_hash;$/;"	v
ns_hash_compare	ns_hash.c	/^int ns_hash_compare(void *a, void *b) {$/;"	f
ns_hash_copy_key	ns_hash.c	/^void *ns_hash_copy_key(void *orig) {$/;"	f
ns_hash_create	ns_hash.c	/^hash_type *ns_hash_create() {$/;"	f
ns_hash_delete_key	ns_hash.c	/^void ns_hash_delete_key(void *key) {$/;"	f
ns_hash_hash	ns_hash.c	/^int ns_hash_hash(void *key) {$/;"	f
option_linedisplay_t	options.h	/^} option_linedisplay_t;$/;"	t	typeref:enum:__anon15
option_port_t	options.h	/^} option_port_t;$/;"	t	typeref:enum:__anon13
option_sort_t	options.h	/^} option_sort_t;$/;"	t	typeref:enum:__anon14
options	options.c	/^options_t options;$/;"	v
options_config_get_bool	options.c	/^int options_config_get_bool(const char *name, int *value) {$/;"	f
options_config_get_bw_rate	options.c	/^int options_config_get_bw_rate(char *directive, long long *result) {$/;"	f
options_config_get_enum	options.c	/^int options_config_get_enum(char *name, config_enumeration_type *enumeration, int *result) {$/;"	f
options_config_get_int	options.c	/^int options_config_get_int(const char *name, int *value) {$/;"	f
options_config_get_net_filter	options.c	/^int options_config_get_net_filter() {$/;"	f
options_config_get_net_filter6	options.c	/^int options_config_get_net_filter6() {$/;"	f
options_config_get_promiscuous	options.c	/^int options_config_get_promiscuous() {$/;"	f
options_config_get_string	options.c	/^int options_config_get_string(const char *name, char **value) {$/;"	f
options_make	options.c	/^void options_make() {$/;"	f
options_read_args	options.c	/^void options_read_args(int argc, char **argv) {$/;"	f
options_set_defaults	options.c	/^void options_set_defaults() {$/;"	f
options_t	options.h	/^} options_t;$/;"	t	typeref:struct:__anon16
optstr	options.c	/^char optstr[] = "+i:f:nNF:G:lhpbBPm:c:";$/;"	v
packet_handler	iftop.c	/^pcap_handler packet_handler;$/;"	v
packet_init	iftop.c	/^void packet_init() {$/;"	f
packet_loop	iftop.c	/^void packet_loop(void *ptr) {$/;"	f
pad	iftop.h	/^    unsigned char pad[3];$/;"	m	struct:pfloghdr
paused	options.h	/^    int paused;$/;"	m	struct:__anon16
pcap_filter	iftop.c	/^struct bpf_program pcap_filter;$/;"	v	typeref:struct:bpf_program
pd	iftop.c	/^pcap_t *pd; \/* pcap descriptor *\/$/;"	v
peakrecv	ui.c	/^int peaksent, peakrecv, peaktotal;$/;"	v
peaksent	ui.c	/^int peaksent, peakrecv, peaktotal;$/;"	v
peaktotal	ui.c	/^int peaksent, peakrecv, peaktotal;$/;"	v
persistenthelp	ui.c	/^int persistenthelp = 0;$/;"	v
pfloghdr	iftop.h	/^struct pfloghdr {$/;"	s
port	serv_hash.h	/^    int port;$/;"	m	struct:__anon17
portresolution	options.h	/^    int portresolution;$/;"	m	struct:__anon16
preg	screenfilter.c	/^regex_t preg;$/;"	v
printdlattachreq	dlcommon.c	/^printdlattachreq(dlp)$/;"	f
printdlbindack	dlcommon.c	/^printdlbindack(dlp)$/;"	f
printdlbindreq	dlcommon.c	/^printdlbindreq(dlp)$/;"	f
printdldetachreq	dlcommon.c	/^printdldetachreq(dlp)$/;"	f
printdldisabmultireq	dlcommon.c	/^printdldisabmultireq(dlp)$/;"	f
printdlenabmultireq	dlcommon.c	/^printdlenabmultireq(dlp)$/;"	f
printdlerrorack	dlcommon.c	/^printdlerrorack(dlp)$/;"	f
printdlinfoack	dlcommon.c	/^printdlinfoack(dlp)$/;"	f
printdlinforeq	dlcommon.c	/^printdlinforeq(dlp)$/;"	f
printdlokack	dlcommon.c	/^printdlokack(dlp)$/;"	f
printdlphysaddrack	dlcommon.c	/^printdlphysaddrack(dlp)$/;"	f
printdlphysaddrreq	dlcommon.c	/^printdlphysaddrreq(dlp)$/;"	f
printdlprim	dlcommon.c	/^printdlprim(dlp)$/;"	f
printdlpromiscoffreq	dlcommon.c	/^printdlpromiscoffreq(dlp)$/;"	f
printdlpromisconreq	dlcommon.c	/^printdlpromisconreq(dlp)$/;"	f
printdlsetphysaddrreq	dlcommon.c	/^printdlsetphysaddrreq(dlp)$/;"	f
printdlsubsbindack	dlcommon.c	/^printdlsubsbindack(dlp)$/;"	f
printdlsubsbindreq	dlcommon.c	/^printdlsubsbindreq(dlp)$/;"	f
printdlsubsunbindreq	dlcommon.c	/^printdlsubsunbindreq(dlp)$/;"	f
printdltestcon	dlcommon.c	/^printdltestcon(dlp)$/;"	f
printdltestind	dlcommon.c	/^printdltestind(dlp)$/;"	f
printdltestreq	dlcommon.c	/^printdltestreq(dlp)$/;"	f
printdltestres	dlcommon.c	/^printdltestres(dlp)$/;"	f
printdluderrorind	dlcommon.c	/^printdluderrorind(dlp)$/;"	f
printdludqosreq	dlcommon.c	/^printdludqosreq(dlp)$/;"	f
printdlunbindreq	dlcommon.c	/^printdlunbindreq(dlp)$/;"	f
printdlunitdataind	dlcommon.c	/^printdlunitdataind(dlp)$/;"	f
printdlunitdatareq	dlcommon.c	/^printdlunitdatareq(dlp)$/;"	f
printdlxidcon	dlcommon.c	/^printdlxidcon(dlp)$/;"	f
printdlxidind	dlcommon.c	/^printdlxidind(dlp)$/;"	f
printdlxidreq	dlcommon.c	/^printdlxidreq(dlp)$/;"	f
printdlxidres	dlcommon.c	/^printdlxidres(dlp)$/;"	f
priority_cfi_vid	ether.h	/^    u_int16_t priority_cfi_vid;$/;"	m	struct:vlan_8021q_header
promiscuous	options.h	/^    int promiscuous;$/;"	m	struct:__anon16
promiscuous_but_choosy	options.h	/^    int promiscuous_but_choosy;$/;"	m	struct:__anon16
protocol	addr_hash.h	/^    unsigned short int protocol;$/;"	m	struct:__anon3
protocol	serv_hash.h	/^    int protocol;$/;"	m	struct:__anon17
pthread_create	threadprof.c	/^#undef pthread_create$/;"	d	file:
pthread_create	threadprof.h	/^#define pthread_create(/;"	d
radiotap_header	ether.h	/^struct radiotap_header {$/;"	s
rateidx	ui.c	/^static int rateidx = 0, wantbiggerrate;$/;"	v	file:
rateidx_init	ui.c	/^static int rateidx_init = 0;$/;"	v	file:
rcsid	edline.c	/^static const char rcsid[] = "$Id: edline.c,v 1.2 2002\/11\/04 12:27:35 chris Exp $";$/;"	v	file:
rcsid	screenfilter.c	/^static const char rcsid[] = "$Id: screenfilter.c,v 1.3 2002\/11\/04 12:27:35 chris Exp $";$/;"	v	file:
rcsid	stringmap.c	/^static const char rcsid[] = "$Id: stringmap.c,v 1.4 2010\/11\/27 11:06:12 pdw Exp $";$/;"	v	file:
rcsid	util.c	/^static const char rcsid[] = "$Id: util.c,v 1.1 2002\/03\/24 17:27:12 chris Exp $";$/;"	v	file:
rcsid	vector.c	/^static const char rcsid[] = "$Id: vector.c,v 1.3 2003\/11\/07 02:16:41 pdw Exp $";$/;"	v	file:
read_config	cfgfile.c	/^int read_config(char *file, int whinge_on_error) {$/;"	f
read_config_file	cfgfile.c	/^int read_config_file(const char *f, int whinge) {$/;"	f
readable_size	ui.c	/^void readable_size(float n, char *buf, int bsize, int ksize, int bytes) {$/;"	f
reason	iftop.h	/^    unsigned char reason;$/;"	m	struct:pfloghdr
rec	hash.h	/^    void *rec;                \/* user data *\/$/;"	m	struct:node_tag
recv	iftop.h	/^    long recv[HISTORY_LENGTH];$/;"	m	struct:__anon9
recv	ui.c	/^    double long recv[HISTORY_DIVISIONS];$/;"	m	struct:host_pair_line_tag	file:
resolve	resolver.c	/^void resolve(int af, void *addr, char *result, int buflen) {$/;"	f
resolve_queue	resolver.c	/^struct addr_storage resolve_queue[RESOLVE_QUEUE_LENGTH];$/;"	v	typeref:struct:addr_storage
resolver_initialise	resolver.c	/^void resolver_initialise() {$/;"	f
resolver_queue_cond	resolver.c	/^pthread_cond_t resolver_queue_cond;$/;"	v
resolver_queue_mutex	resolver.c	/^pthread_mutex_t resolver_queue_mutex;$/;"	v
resolver_worker	resolver.c	/^void resolver_worker(void *ptr) {$/;"	f
result	resolver.c	/^    int result;$/;"	m	struct:ares_callback_comm	file:
root	sorted_list.h	/^    sorted_list_node root;$/;"	m	struct:__anon18
rulenr	iftop.h	/^    unsigned int rulenr;$/;"	m	struct:pfloghdr
ruleset	iftop.h	/^    char ruleset[16];$/;"	m	struct:pfloghdr
scale	ui.c	/^} scale[] = {$/;"	v	typeref:struct:__anon2	file:
screen_filter_match	screenfilter.c	/^int screen_filter_match(char *s) {$/;"	f
screen_filter_set	screenfilter.c	/^int screen_filter_set(char *s) {$/;"	f
screen_hash	ui.c	/^hash_type *screen_hash;$/;"	v
screen_hash_clear	ui.c	/^void screen_hash_clear() {$/;"	f
screen_line_bandwidth_compare	ui.c	/^int screen_line_bandwidth_compare(host_pair_line *aa, host_pair_line *bb, int start_div) {$/;"	f
screen_line_compare	ui.c	/^int screen_line_compare(void *a, void *b) {$/;"	f
screen_line_host_compare	ui.c	/^int screen_line_host_compare(void *a, void *b, host_pair_line *aa, host_pair_line *bb) {$/;"	f
screen_list	ui.c	/^sorted_list_type screen_list;$/;"	v
screen_list_clear	ui.c	/^void screen_list_clear() {$/;"	f
screen_list_init	ui.c	/^void screen_list_init() {$/;"	f
screen_offset	options.h	/^    int screen_offset;$/;"	m	struct:__anon16
screenfilter	options.h	/^    char *screenfilter;$/;"	m	struct:__anon16
sent	iftop.h	/^    long sent[HISTORY_LENGTH];$/;"	m	struct:__anon9
sent	ui.c	/^    double long sent[HISTORY_DIVISIONS];$/;"	m	struct:host_pair_line_tag	file:
serv_hash_compare	serv_hash.c	/^int serv_hash_compare(void *a, void *b) {$/;"	f
serv_hash_copy_key	serv_hash.c	/^void *serv_hash_copy_key(void *orig) {$/;"	f
serv_hash_create	serv_hash.c	/^hash_type *serv_hash_create() {$/;"	f
serv_hash_delete_key	serv_hash.c	/^void serv_hash_delete_key(void *key) {$/;"	f
serv_hash_hash	serv_hash.c	/^int serv_hash_hash(void *key) {$/;"	f
serv_hash_initialise	serv_hash.c	/^void serv_hash_initialise(hash_type *sh) {$/;"	f
service_hash	ui.c	/^hash_type *service_hash;$/;"	v
set_filter_code	iftop.c	/^char *set_filter_code(const char *filter) {$/;"	f
set_max_bandwidth	options.c	/^static void set_max_bandwidth(char *arg) {$/;"	f	file:
set_net_filter	options.c	/^static void set_net_filter(char *arg) {$/;"	f	file:
show_totals	options.h	/^    int show_totals;$/;"	m	struct:__anon16
showbars	options.h	/^    int showbars;$/;"	m	struct:__anon16
showhelp	options.h	/^    int showhelp;$/;"	m	struct:__anon16
showhelp	ui.c	/^void showhelp(const char *s) {$/;"	f
showhelphint	ui.c	/^int showhelphint = 0;$/;"	v
showports	options.h	/^    option_port_t showports;$/;"	m	struct:__anon16
showports_enumeration	options.c	/^config_enumeration_type showports_enumeration[] = {$/;"	v
showportstatus	ui.c	/^void showportstatus() {$/;"	f
sigalrm	dlcommon.c	/^sigalrm()$/;"	f	file:
size	hash.h	/^    int size;$/;"	m	struct:__anon8
sll_addr	sll.h	/^    u_int8_t sll_addr[SLL_ADDRLEN];    \/* link-layer address *\/$/;"	m	struct:sll_header
sll_halen	sll.h	/^    u_int16_t sll_halen;        \/* link-layer address length *\/$/;"	m	struct:sll_header
sll_hatype	sll.h	/^    u_int16_t sll_hatype;        \/* link-layer address type *\/$/;"	m	struct:sll_header
sll_header	sll.h	/^struct sll_header {$/;"	s
sll_pkttype	sll.h	/^    u_int16_t sll_pkttype;        \/* packet type *\/$/;"	m	struct:sll_header
sll_protocol	sll.h	/^    u_int16_t sll_protocol;        \/* protocol *\/$/;"	m	struct:sll_header
snap	llc.h	/^        } snap;$/;"	m	union:llc::__anon10	typeref:struct:llc::__anon10::__anon11
snap_ether	llc.h	/^        } snap_ether;$/;"	m	union:llc::__anon10	typeref:struct:llc::__anon10::__anon12
snap_ethertype	llc.h	/^            u_int8_t snap_ethertype[2];$/;"	m	struct:llc::__anon10::__anon12
snap_orgcode	llc.h	/^            u_int8_t snap_orgcode[3];$/;"	m	struct:llc::__anon10::__anon12
snap_pi	llc.h	/^            u_int8_t snap_pi[5];$/;"	m	struct:llc::__anon10::__anon11
snap_ui	llc.h	/^            u_int8_t snap_ui;$/;"	m	struct:llc::__anon10::__anon11
snap_ui	llc.h	/^            u_int8_t snap_ui;$/;"	m	struct:llc::__anon10::__anon12
sort	options.h	/^    option_sort_t sort;$/;"	m	struct:__anon16
sort_enumeration	options.c	/^config_enumeration_type sort_enumeration[] = {$/;"	v
sorted_list_destroy	sorted_list.c	/^void sorted_list_destroy(sorted_list_type *list) {$/;"	f
sorted_list_initialise	sorted_list.c	/^void sorted_list_initialise(sorted_list_type *list) {$/;"	f
sorted_list_insert	sorted_list.c	/^void sorted_list_insert(sorted_list_type *list, void *item) {$/;"	f
sorted_list_next_item	sorted_list.c	/^sorted_list_node *sorted_list_next_item(sorted_list_type *list, sorted_list_node *prev) {$/;"	f
sorted_list_node	sorted_list.h	/^} sorted_list_node;$/;"	t	typeref:struct:sorted_list_node_tag
sorted_list_node_tag	sorted_list.h	/^typedef struct sorted_list_node_tag {$/;"	s
sorted_list_type	sorted_list.h	/^} sorted_list_type;$/;"	t	typeref:struct:__anon18
split_dname	addrs_dlpi.c	/^split_dname(char *device, int *unitp)$/;"	f
sprint_host	ui.c	/^void sprint_host(char *line, int af, struct in6_addr *addr, unsigned int port, unsigned int protocol, int L) {$/;"	f
src	addr_hash.h	/^        struct in_addr src;$/;"	m	union:__anon3::__anon4	typeref:struct:__anon3::__anon4::in_addr
src6	addr_hash.h	/^        struct in6_addr src6;$/;"	m	union:__anon3::__anon4	typeref:struct:__anon3::__anon4::in6_addr
src_port	addr_hash.h	/^    unsigned short int src_port;$/;"	m	struct:__anon3
ssap	llc.h	/^    u_int8_t ssap;$/;"	m	struct:llc
start_routine	threadprof.c	/^    void *(*start_routine)(void *);$/;"	m	struct:wrapper_s	file:
strgetmsg	dlcommon.c	/^strgetmsg(fd, ctlp, datap, flagsp, caller)$/;"	f
stringmap	stringmap.h	/^} *stringmap;$/;"	t	typeref:struct:_stringmap
stringmap_delete	stringmap.c	/^void stringmap_delete(stringmap S) {$/;"	f
stringmap_delete_free	stringmap.c	/^void stringmap_delete_free(stringmap S) {$/;"	f
stringmap_find	stringmap.c	/^stringmap stringmap_find(const stringmap S, const char *k) {$/;"	f
stringmap_insert	stringmap.c	/^item *stringmap_insert(stringmap S, const char *k, const item d) {$/;"	f
stringmap_new	stringmap.c	/^stringmap stringmap_new() {$/;"	f
stringtoaddr	dlcommon.c	/^stringtoaddr(sp, addr)$/;"	f
strioctl	dlcommon.c	/^strioctl(fd, cmd, timout, len, dp)$/;"	f
strncat2	addrs_dlpi.c	/^strncat2(char *dest, char *src, int n)$/;"	f
strncpy2	addrs_dlpi.c	/^strncpy2(char *dest, char *src, int n)$/;"	f
subrulenr	iftop.h	/^    unsigned int subrulenr;$/;"	m	struct:pfloghdr
syserr	dlcommon.c	/^syserr(s)$/;"	f
table	hash.h	/^    hash_node_type **table;$/;"	m	struct:__anon8
tail	resolver.c	/^int tail;$/;"	v
tcp_seq	tcp.h	/^typedef u_int32_t tcp_seq;$/;"	t
tcphdr	tcp.h	/^struct tcphdr {$/;"	s
th_ack	tcp.h	/^    tcp_seq th_ack;            \/* acknowledgement number *\/$/;"	m	struct:tcphdr
th_dport	tcp.h	/^    u_int16_t th_dport;        \/* destination port *\/$/;"	m	struct:tcphdr
th_flags	tcp.h	/^    u_int8_t th_flags;$/;"	m	struct:tcphdr
th_offx2	tcp.h	/^    u_int8_t th_offx2;        \/* data offset, rsvd *\/$/;"	m	struct:tcphdr
th_seq	tcp.h	/^    tcp_seq th_seq;            \/* sequence number *\/$/;"	m	struct:tcphdr
th_sport	tcp.h	/^    u_int16_t th_sport;        \/* source port *\/$/;"	m	struct:tcphdr
th_sum	tcp.h	/^    u_int16_t th_sum;            \/* checksum *\/$/;"	m	struct:tcphdr
th_urp	tcp.h	/^    u_int16_t th_urp;            \/* urgent pointer *\/$/;"	m	struct:tcphdr
th_win	tcp.h	/^    u_int16_t th_win;            \/* window *\/$/;"	m	struct:tcphdr
tick	iftop.c	/^void tick(int print) {$/;"	f
tick_mutex	iftop.c	/^pthread_mutex_t tick_mutex;$/;"	v
token_ac	token.h	/^    u_int8_t token_ac;$/;"	m	struct:token_header
token_dhost	token.h	/^    u_int8_t token_dhost[TOKEN_RING_MAC_LEN];$/;"	m	struct:token_header
token_fc	token.h	/^    u_int8_t token_fc;$/;"	m	struct:token_header
token_header	token.h	/^struct token_header {$/;"	s
token_rcf	token.h	/^    u_int16_t token_rcf;$/;"	m	struct:token_header
token_rseg	token.h	/^    u_int16_t token_rseg[ROUTING_SEGMENT_MAX];$/;"	m	struct:token_header
token_shost	token.h	/^    u_int8_t token_shost[TOKEN_RING_MAC_LEN];$/;"	m	struct:token_header
total_recv	iftop.h	/^    double long total_recv;$/;"	m	struct:__anon9
total_recv	ui.c	/^    double long total_recv;$/;"	m	struct:host_pair_line_tag	file:
total_sent	iftop.h	/^    double long total_sent;$/;"	m	struct:__anon9
total_sent	ui.c	/^    double long total_sent;$/;"	m	struct:host_pair_line_tag	file:
totals	ui.c	/^host_pair_line totals;$/;"	v
turnOffColor	ui.c	/^void turnOffColor(int color_ary[]) {$/;"	f
turnOnColor	ui.c	/^void turnOnColor(int color_ary[]) {$/;"	f
u_ctl	llc.h	/^        u_int8_t u_ctl;$/;"	m	union:llc::__anon10
u_int16_t	integers.h	/^        typedef unsigned int u_int16_t;     \/* Not likely. *\/$/;"	t
u_int16_t	integers.h	/^        typedef unsigned short int u_int16_t;$/;"	t
u_int16_t	integers.h	/^typedef uint16_t u_int16_t;$/;"	t
u_int32_t	integers.h	/^        typedef unsigned int u_int32_t;$/;"	t
u_int32_t	integers.h	/^        typedef unsigned long int u_int32_t;$/;"	t
u_int32_t	integers.h	/^typedef uint32_t u_int32_t;$/;"	t
u_int8_t	integers.h	/^    typedef unsigned char u_int8_t;         \/* By definition. *\/$/;"	t
u_int8_t	integers.h	/^typedef uint8_t u_int8_t;$/;"	t
ui_curses_init	ui.c	/^void ui_curses_init() {$/;"	f
ui_finish	ui.c	/^void ui_finish() {$/;"	f
ui_init	ui.c	/^void ui_init() {$/;"	f
ui_loop	ui.c	/^void ui_loop() {$/;"	f
ui_print	ui.c	/^void ui_print() {$/;"	f
ui_tick	ui.c	/^void ui_tick(int print) {$/;"	f
unit_bits	ui.c	/^char *unit_bits[UNIT_DIVISIONS] = {"b", "kb", "Mb", "Gb"};$/;"	v
unit_bytes	ui.c	/^char *unit_bytes[UNIT_DIVISIONS] = {"B", "kB", "MB", "GB"};$/;"	v
usage	options.c	/^static void usage(FILE *fp) {$/;"	f	file:
v	vector.h	/^    void *v;$/;"	m	union:_item
value	cfgfile.h	/^    int value;$/;"	m	struct:__anon6
vector	vector.h	/^} *vector;$/;"	t	typeref:struct:_vector
vector_back	vector.c	/^item vector_back(vector v) {$/;"	f
vector_delete	vector.c	/^void vector_delete(vector v) {$/;"	f
vector_delete_free	vector.c	/^void vector_delete_free(vector v) {$/;"	f
vector_iterate	vector.h	/^#define vector_iterate(/;"	d
vector_new	vector.c	/^vector vector_new(void) {$/;"	f
vector_pop_back	vector.c	/^void vector_pop_back(vector v) {$/;"	f
vector_push_back	vector.c	/^void vector_push_back(vector v, const item t) {$/;"	f
vector_reallocate	vector.c	/^void vector_reallocate(vector v, const size_t n) {$/;"	f
vector_remove	vector.c	/^item *vector_remove(vector v, item *t) {$/;"	f
vlan_8021q_header	ether.h	/^struct vlan_8021q_header {$/;"	s
wait	threadprof.c	/^    pthread_cond_t wait;$/;"	m	struct:wrapper_s	file:
wantbiggerrate	ui.c	/^static int rateidx = 0, wantbiggerrate;$/;"	v	file:
wrapper_routine	threadprof.c	/^static void *wrapper_routine(void *data) {$/;"	f	file:
wrapper_s	threadprof.c	/^typedef struct wrapper_s {$/;"	s	file:
wrapper_t	threadprof.c	/^} wrapper_t;$/;"	t	typeref:struct:wrapper_s	file:
xcalloc	util.c	/^void *xcalloc(size_t n, size_t m) {$/;"	f
xfree	util.c	/^void xfree(void *v) {$/;"	f
xmalloc	util.c	/^void *xmalloc(size_t n) {$/;"	f
xrealloc	util.c	/^void *xrealloc(void *w, size_t n) {$/;"	f
xstrdup	util.c	/^char *xstrdup(const char *s) {$/;"	f
